tags:
  transform:
    name: Transform
    description: Time series transformation functions

  arithmetic:
    name: Arithmetic

  label:
    name: Label
    description: Functions to alter names of returned time series

  calculate:
    name: Calculate
    description: Perform calculations based on time series values

  filter:
    name: Filter
    description: Functions to select a subset of values or time series

  statistical:
    name: Statistical
    description: Operations based on statistical analysis of time series

  combine:
    name: Combine
    description: Combine multiple time series together

  differential:
    name: Differential

  generate:
    name: Generate
    description: Functions to generate new time series

  sort:
    name: Sort
    description: Modify the natural ordering of time series

  time:
    name: Time
    description: Alter the time of data points


prototypes:
  absolute:
    name: Absolute
    description: Takes a series or set of series, and applies the mathematical abs function to each datapoint transforming it to its absolute value.
    parameters:
      - name: Series
        description: Series to apply function to
        type: timeSeries
        mandatory: true
    tags: [transform, arithmetic]

  alias:
    name: Alias
    description: Takes a series and a string in quotes. Uses the string instead of the metric as the series name.
    parameters:
      - name: Series
        description: Series to rename
        type: timeSeries
        mandatory: true
      - name: NewName
        description: The new name for the series
        type: string
        mandatory: true
    tags: [label]

  aliasSub:
    name: Alias Substitute
    description: Runs series names through a regex search/replace.
    parameters:
      - name: Series
        description: Series to rename
        type: timeSeries
        mandatory: true
      - name: Search
        description: A regular expression search string
        type: string
        mandatory: true
      - name: Replace
        description: The replace string
        type: string
        mandatory: true
    tags: [label]

  aliasByNode:
    name: Alias By Node
    description: Takes a series or set of series and applies an alias derived from one or more “node” portion/s of the series name. Node indices are 0 indexed.
    parameters:
      - name: Series
        description: Series to rename
        type: timeSeries
        mandatory: true
      - name: NodeIndices
        description: Indices of the nodes to use for the new series name.
        type: number
        mandatory: true
        multiple: true
    tags: [label]

  asPercent:
    name: As Percent
    description: Takes a series or set of series, and calculates a percentage of the total of the series. If total is specified, each series will be calculated as a percentage of that total. If total is not specified, the sum of all points in the series set will be used instead.
    parameters:
      - name: Series
        description: Series to calculate percentage of
        type: timeSeries
        mandatory: true
      - name: Total
        description: "Total to use (default: None / derived from series)"
        type: number
        mandatory: false
    tags: [calculate, arithmetic]

  averageAbove:
    name: Average Above
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, returns only the metrics with an average value above N for the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter, statistical]

  averageBelow:
    name: AverageBelow
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, returns only the metrics with an average value below N for the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter, statistical]

  averageSeries:
    name: Average Series
    description: Takes a series or set of series. Returns the average value of all metrics passed at each time.
    parameters:
      - name: Series
        description: List of series to average from
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic, statistical]

  averageOutsidePercentile:
    name: Average Outside Percentile
    description: Removes series lying inside an average percentile interval.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: N
        description: n-th percentile
        type: number
        mandatory: true
    tags: [filter, statistical]

  binAbsolute:
    name: Bin (Absolute)
    description: Bin values for each series into the given bins. A value will be placed in the first bin where the value is greater-than, or equal-to the bin value.
    parameters:
      - name: Series
        description: Series to bin values for
        type: timeSeries
        mandatory: true
      - name: Bin Stop(s)
        description: All values between this value and the next bin argument will be set to this value.
        type: number
        mandatory: false
        multiple: true
    tags: [transform, differential]

  constantLine:
    name: Constant Line
    description: Defines a constant time-series with Y value.
    parameters:
      - name: Y
        description: Constant Value
        type: number
        mandatory: true
    tags: [generate]

  countSeries:
    name: Count Series
    description: Takes a series or set of series. generates a new time-series representing the number of nodes found in the input series.
    parameters:
      - name: Series
        description: Series to count
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, generate]

  currentAbove:
    name: Current Above
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the metrics whose value is above N at the end of the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter]

  currentBelow:
    name: Current Below
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the metrics whose value is below N at the end of the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter]

  derivative:
    name: Derivative
    description: This is the opposite of the integral function. This is useful for taking a running total metric and calculating the delta between subsequent data points. This function does not normalize for periods of time, as a true derivative would. Instead see the perSecond() function to calculate a rate of change over time.
    parameters:
      - name: Series
        description: Series to calculate derivative
        type: timeSeries
        mandatory: true
      - name: Step
        description: Distance between the values to find the delta of. Defaults to 1 (i.e. the value immediately prior).
        type: number
        mandatory: false
    tags: [transform, differential]

  diffSeries:
    name: Diff Series
    description: Takes a set of series (at least 2) and subtracts them. Subtracts parameter 2 through n (subtrahend) from parameter 1 (minuend).
    parameters:
      - name: Series
        description: Series to subtract
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic]

  divideSeries:
    name: Divide Series
    description: Takes a dividend metric and a divisor metric and returns the division result.
    parameters:
      - name: Dividend
        description: Dividend Series
        type: timeSeries
        mandatory: true
      - name: Divisor
        description: Divisor Series
        type: timeSeries
        mandatory: true
    tags: [combine, arithmetic]

  divideSeriesArrays:
    name: Divide Series (Arrays)
    description: Takes a group of dividend metrics and a group of divisor metrics and divides each metric in the dividend group by the metric at the same index of the divisor group. Both groups must have exactly the same number of elements.
    parameters:
      - name: Dividend Group
        description: Group of Dividend Series
        type: timeSeries
        mandatory: true
      - name: Divisor Group
        description: Group of Divisor Series
        type: timeSeries
        mandatory: true
    tags: [combine, arithmetic]

  diurnalForecast:
    name: Diurnal Forecast
    description: Uses historical data to forecast the lowest expected value for each point in time.
    parameters:
      - name: Series
        description: Series to compute the dirurnal forecast for
        type: timeSeries
        mandatory: true
      - name: Weeks
        description: Number of weeks to use for the historical reference window (defaults to 4).
        type: number
        default: 4
        mandatory: false
      - name: Percentile
        description: For each forecast point, the value at this percentile is extracted from the historical window of values (defaults to 2, use 0 for the minimum).
        type: number
        default: 2
        mandatory: false
    tags: [statistical, calculate]

  exclude:
    name: Exclude
    description: Takes a series or set of series followed by one or more regular expressions. Excludes metrics that match any of the regular expression.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: patterns
        description: Regular expression matching pattern
        type: string
        mandatory: true
        multiple: true
    tags: [filter]

  grep:
    name: Grep
    description: Takes a series or set of series followed by one or more regular expressions. Excludes metrics that do not match any of the regular expressions.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: patterns
        description: Regular expression matching pattern
        type: string
        mandatory: true
        multiple: true
    tags: [filter]

  group:
    name: Group Series
    description: Takes an arbitrary number of series and adds them to a single series list. This is used to pass multiple series to a function which only takes one.
    parameters:
      - name: Series
        description: Series to group
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine]

  groupByNode:
    name: Group by Node
    description: Takes a wildcarded series and maps a callback function to subgroups within as defined by a common node.
    parameters:
      - name: Series
        description: Series to group
        type: timeSeries
        mandatory: true
        multiple: true
      - name: NodeNum
        description: Index number of the wildcarded node
        type: number
        mandatory: true
      - name: Callback
        description: Callback function name
        type: string
        mandatory: true
    tags: [combine]

  groupByNodes:
    name: Group by Nodes
    description: Takes a wildcarded series and maps a callback function to subgroups within as defined by a set of common nodes.
    parameters:
      - name: Series
        description: Series to group
        type: timeSeries
        mandatory: true
        multiple: false
      - name: Callback
        description: Callback function name
        type: string
        mandatory: true
      - name: NodeNum
        description: Index number of the wildcarded node
        type: number
        mandatory: true
        multiple: true
    tags: [combine]

  highestAverage:
    name: Highest Average
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the top N metrics with the highest average value for the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold of average value
        type: number
        mandatory: true
    tags: [filter, statistical]

  highestCurrent:
    name: Highest Current
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the N metrics with the highest value at the end of the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold of current value
        type: number
        mandatory: true
    tags: [filter]

  highestMax:
    name: Highest Max
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the N metrics with the highest maximum value in the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold of max value
        type: number
        mandatory: true
    tags: [filter]

  hitCount:
    name: Hit Count
    description: Estimate hit counts from a list of time series. This function assumes the values in each time series represent hits per second. It calculates hits per some larger interval such as per day or per hour. This function is like summarize(), except that it compensates automatically for different time scales (so that a similar graph results from using either fine-grained or coarse-grained records) and handles rarely-occurring events gracefully.
    parameters:
      - name: Series
        description: Hit-based series to count
        type: timeSeries
        mandatory: true
      - name: Interval
        description: "Bucket time-interval size. Examples: 1hour, 1week, 13week, ..."
        type: string
        mandatory: true
      - name: AlignToInterval
        description: "Force align start of time buckets. (default: False)."
        type: string
        mandatory: false
    tags: [transform]

  holtWintersConfidenceBands:
    name: Holt Winters Confidence Bands
    description: Performs a Holt-Winters forecast using the series as input data and returns upper and lower bands with the predicted forecast deviations.
    parameters:
      - name: Series
        description: Series to calculate Holt-Winters forecast on
        type: timeSeries
        mandatory: true
      - name: Delta
        description: "(default: 3)"
        type: number
        mandatory: false
    tags: [calculate, statistical]

  holtWintersForecast:
    name: Holt Winters Forecast
    description: Performs a Holt-Winters forecast using the series as input data. Data from one week previous to the series is used to bootstrap the initial forecast.
    parameters:
      - name: Series
        description: Series to calculate Holt-Winters forecast on
        type: timeSeries
        mandatory: true
    tags: [calculate, statistical]

  invert:
    name: Invert
    description: Takes a series or set of series, and inverts each datapoint (i.e. 1/x).
    parameters:
      - name: Series
        description: Series to invert
        type: timeSeries
        mandatory: true
    tags: [transform, arithmetic]


  integral:
    name: Integral
    description: This will return the sum over time, sort of like a continuous addition function. Useful for finding totals or trends in metrics that are collected per minute.
    parameters:
      - name: Series
        description: Series to integrate
        type: timeSeries
        mandatory: true
    tags: [transform, differential]

  keepDayOfWeek:
    name: Keep Day of Week
    description: Keeps data only from the given day(s) of the week. e.g. if 'Sunday' is specified, all data points that do not fall on a Sunday will be set to null.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Day
        description: Day of week to keep. 'weekend' and 'weekday' are also accepted values.
        type: string
        mandatory: true
        multiple: true
    tags: [filter]

  keepHourOfDay:
    name: Keep Hour of Day
    description: Keeps data only from the given hour(s) of each day. e.g. if 17 is specified, all data points that do not fall between 17:00 and 18:00 will be set to null
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Hour
        description: Hour of day to keep (0-24).
        type: number
        mandatory: true
        multiple: true
    tags: [filter]

  keepLastValue:
    name: Keep Last Value
    description: Continues the line with the last received value when gaps ('null' values) appear the data, rather than breaking the line.
    parameters:
      - name: Series
        description: Series to continue line for
        type: timeSeries
        mandatory: true
      - name: Points
        description: Number of null points to replace (defaults to infinite)
        type: number
        mandatory: false
    tags: [transform]

  limit:
    name: Limit
    description: Takes a series or set of series followed by an integer N. Only returns the first N metrics. Useful when testing a wildcard in a metric.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Limit
        description: Max number of metrics to return
        type: number
        mandatory: true
    tags: [filter]

  log:
    name: Logarithm
    description: Takes a series or set of series, a base, and applies a logarithmic function. If base is omitted, the function defaults to base 10.
    parameters:
      - name: Series
        description: Series to apply log to
        type: timeSeries
        mandatory: true
      - name: Base
        description: "Log base (default: 10)"
        type: number
        mandatory: false
    tags: [transform, arithmetic]

  lowestAverage:
    name: Lowest Average
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the bottom N metrics with the lowest average value for the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold of average value
        type: number
        mandatory: true
    tags: [filter, statistical]

  lowestCurrent:
    name: Lowest Current
    description: Takes a series or set of series, followed by an integer N. Out of all metrics passed, returns only the N metrics with the lowest value at the end of the time period specified.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold of current value
        type: number
        mandatory: true
    tags: [filter]

  maximumAbove:
    name: Maximum Above
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, only the metrics with a maximum value above N.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold maximum value
        type: number
        mandatory: true
    tags: [filter]

  maximumBelow:
    name: Maximum Below
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, only the metrics with a maximum value below N.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold maximum value
        type: number
        mandatory: true
    tags: [filter]

  minimumAbove:
    name: Minimum Above
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, only the metrics with a minimum value above N.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold minimum value
        type: number
        mandatory: true
    tags: [filter]

  minimumBelow:
    name: Minimum Below
    description: Takes a series or set of series followed by an integer N. Out of all metrics passed, only the metrics with a minimum value below N.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold minimum value
        type: number
        mandatory: true
    tags: [filter]

  maxSeries:
    name: Maximum Series
    description: For each datapoint from each series passed in, returns the maximum value.
    parameters:
      - name: Series
        description: List of Series to pick maximum from
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic, statistical]

  movingAverage:
    name: Moving Average
    description: calculates the moving average of a metric (or metrics) over a fixed number of past points, or a time interval. Takes a series or set of series followed by a number of datapoints or a length of time. Returns the average of the preceeding datapoints for each point on the series. All previous datapoints are set to None at the beginning.
    parameters:
      - name: Series
        description: Series to calculate moving average on
        type: timeSeries
        mandatory: true
      - name: windowSize
        description: Number of datapoints or a string with a length of time like '1hour' or '5min'
        type: string
        mandatory: true
    tags: [calculate, statistical]

  movingMedian:
    name: Moving Median
    description: calculates the moving median of a metric (or metrics) over a fixed number of past points, or a time interval. Takes a series or set of series followed by a number of datapoints or a length of time. Returns the median of the preceeding datapoints for each point on the series. All previous datapoints are set to None at the beginning.
    parameters:
      - name: Series
        description: Series to calculate moving median on
        type: timeSeries
        mandatory: true
      - name: windowSize
        description: Number of datapoints or a string with a length of time like '1hour' or '5min'
        type: string
        mandatory: true
    tags: [calculate, statistical]

  minSeries:
    name: Minimum Series
    description: For each datapoint from each series passed in, returns the minimum value.
    parameters:
      - name: Series
        description: List of Series to pick minimum from
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic, statistical]

  minValue:
    name: Minimum Value
    description: For each series, draws a constant line at y = min(series) with the same step as the original series.
    parameters:
      - name: Series
        description: List of Series to draw minimum lines for
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic, statistical]

  mostDeviant:
    name: Most Deviant
    description: Takes a series or set of series followed by an integer N. Returns the N most deviant metrics. To find the deviants, the standard deviation (sigma) of each series is taken and ranked. The top N standard deviations are returned.
    parameters:
      - name: Series
        description: Series to calculate deviation on
        type: timeSeries
        mandatory: true
      - name: N
        description: Top number of series to return (int)
        type: number
        mandatory: true
    tags: [filter, statistical]

  multiplySeries:
    name: Multiply Series
    description: Takes two or more series and multiplies their points.
    parameters:
      - name: Series
        description: List of Series (at least 2)
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic]

  nonNegativeDerivative:
    name: Non-negative Derivative
    description: Same as the derivative function, but ignores datapoints that trend down. Useful for counters that increase for a long time, then wrap or reset.
    parameters:
      - name: Series
        description: Series to calculate derivative
        type: timeSeries
        mandatory: true
      - name: MaxValue
        description: "Maximum Value (default: None)"
        type: number
        mandatory: false
    tags: [transform, differential]

  normalize:
    name: Normalize
    description: Normalizes the values in each series to be between -1 and 1. Each value is scaled based on the maximum absolute value of the series.
    parameters:
      - name: Series
        description: List of Series to normalize
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [transform, arithmetic]

  nPercentile:
    name: N Percentile
    description: Returns n-percent of each series.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: N
        description: Nth-percentile
        type: number
        mandatory: true
    tags: [filter]

  percentileOfSeries:
    name: Percentile of Series
    description: Returns a single series which is composed of the n-percentile values taken across a wildcard series at each point. Unless interpolate is set to True, percentile values are actual values contained in one of the supplied series.
    parameters:
      - name: Series
        description: Series to calculate percentile
        type: timeSeries
        mandatory: true
      - name: N
        description: n-th percentile
        type: number
        mandatory: true
      - name: Interpolate
        description: "Boolean (True/False) to request interpolation or not (default: False)"
        type: string
        mandatory: false
    tags: [transform, statistical]

  pow:
    name: Power
    description: Takes a series or set of series followed by a constant, and raises each series to the exponent of the constant provided.
    parameters:
      - name: Series (Base)
        description: Series to apply power to
        type: timeSeries
        mandatory: true
      - name: Exponent
        description: Value of exponents
        type: number
        mandatory: true
    tags: [transform, arithmetic]

  offset:
    name: Offset
    description: Takes a series or set of series followed by a constant, and adds the constant to each datapoint.
    parameters:
      - name: Series
        description: Series to offset
        type: timeSeries
        mandatory: true
      - name: Factor
        description: Offset factor (float)
        type: number
        mandatory: true
    tags: [transform, arithmetic]

  offsetToZero:
    name: Offset to Zero
    description: Offsets a series or set of series by subtracting the minimum value in the series from each datapoint. Useful to compare different series where the values in each series may be higher or lower on average but you’re only interested in the relative difference.
    parameters:
      - name: Series
        description: Series to offset
        type: timeSeries
        mandatory: true
    tags: [transform, arithmetic]

  perSecond:
    name: Per Second
    description: Derivative adjusted for the series time interval. This is useful for taking a running total metric and showing how many requests per second were handled.
    parameters:
      - name: Series
        description: Series to calculate derivative
        type: timeSeries
        mandatory: true
      - name: MaxValue
        description: "Maximum Value (default: None)"
        type: number
        mandatory: false
    tags: [transform, differential]

  rangeOfSeries:
    name: Range of Series
    description: Takes a series or set of series. Distills down a set of inputs into the range of the series.
    parameters:
      - name: Series
        description: List of Series to calculate range
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine]

  removeAbovePercentile:
    name: Remove Above Percentile
    description: Removes data above the nth percentile from the series or set of series provided. Values above this percentile are assigned a value of None.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: N
        description: n-th percentile
        type: number
        mandatory: true
    tags: [filter, statistical]

  removeAboveValue:
    name: Remove Above Value
    description: Removes data above the given threshold from the series or set of series provided. Values above this threshold are assigned a value of None.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter]

  removeBelowPercentile:
    name: Remove Below Percentile
    description: Removes data above the nth percentile from the series or set of series provided. Values below this percentile are assigned a value of None.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: N
        description: n-th percentile
        type: number
        mandatory: true
    tags: [filter, statistical]

  removeBelowValue:
    name: Remove Below Value
    description: Removes data above the given threshold from the series or set of series provided. Values below this threshold are assigned a value of None.
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
      - name: Threshold
        description: Threshold value
        type: number
        mandatory: true
    tags: [filter]

  removeEmpty:
    name: Remove Empty
    description: Removes series that are empty (i.e. those comprised entirely of None values)
    parameters:
      - name: Series
        description: Series to filter from
        type: timeSeries
        mandatory: true
    tags: [filter]

  removeBetweenPercentile:
    name: Remove Between Percentile
    description: Removes series which do not have an value lying in the x-percentile of all the values at any moment.
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: N
        description: n-th percentile
        type: number
        mandatory: true
    tags: [filter, statistical]

  removeDayOfWeek:
    name: Remove Day of Week
    description: Removes data from the given day(s) of the week. e.g. if 'Sunday' is specified, all data points that fall on a Sunday will be set to null
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Day
        description: Day of week to remove. 'weekend' and 'weekday' are also accepted values.
        type: string
        mandatory: true
        multiple: true
    tags: [filter]

  removeHourOfDay:
    name: Remove Hour of Day
    description: Removes data from the given hour(s) of each day. e.g. if 17 is specified, all data points that fall between 17:00 and 18:00 will be set to null
    parameters:
      - name: Series
        description: Series to filter
        type: timeSeries
        mandatory: true
      - name: Hour
        description: Hour of day to remove (0-24).
        type: number
        mandatory: true
        multiple: true
    tags: [filter]

  scale:
    name: Scale
    description: Takes a series or set of series followed by a constant, and multiplies the datapoint by the constant provided at each point.
    parameters:
      - name: Series
        description: Series to scale
        type: timeSeries
        mandatory: true
      - name: Factor
        description: Scaling factor (float)
        type: number
        mandatory: true
    tags: [transform, arithmetic]

  scaleToSeconds:
    name: Scale to Seconds
    description: Takes a series or set of series and returns “value per seconds” (vps), where seconds is the last argument in this function. Useful in conjunction with derivative or integral function if you want to normalize its result to a known resolution for arbitrary retentions.
    parameters:
      - name: Series
        description: Series to measure vps
        type: timeSeries
        mandatory: true
      - name: Seconds
        description: Definition of "seconds"
        type: number
        mandatory: true
    tags: [transform]

  sortByMaxima:
    name: Sort by Maxima
    description: Takes a series or set of series and sorts the metrics by the maximum value across the time period specified.
    parameters:
      - name: Series
        description: Series to sort
        type: timeSeries
        mandatory: true
    tags: [sort]

  sortByMinima:
    name: Sort by Minima
    description: Takes a series or set of series and sorts the metrics by the minimum value across the time period specified.
    parameters:
      - name: Series
        description: Series to sort
        type: timeSeries
        mandatory: true
    tags: [sort]

  sortByTotal:
    name: Sort by Total
    description: Takes a series or set of series and sorts the metrics by the sum of values across the time period specified.
    parameters:
      - name: Series
        description: Series to sort
        type: timeSeries
        mandatory: true
    tags: [sort]

  sortByName:
    name: Sort by Name
    description: Takes a series or set of series and sorts the metrics by the name of each series
    parameters:
      - name: Series
        description: Series to sort
        type: timeSeries
        mandatory: true
    tags: [sort]

  squareRoot:
    name: Square Root
    description: Takes a series or set of series, and computes the square root of each datapoint.
    parameters:
      - name: Series (Base)
        description: Series to apply square root to
        type: timeSeries
        mandatory: true
    tags: [transform, arithmetic]

  stdev:
    name: Standard Deviation (stdev)
    description: Returns the standard deviation of all metrics passed at each time.
    parameters:
      - name: Series
        description: Series to calculate stdev on
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, calculate, statistical]

  summarize:
    name: Summarize
    description: Summarize the data into interval buckets of a certain size. By default, the contents of each interval bucket are summed together. This is useful for counters where each increment represents a discrete event and retrieving a “per X” value requires summing all the events in that interval. Specifying ‘avg’ instead will return the mean for each bucket, which can be more useful when the value is a gauge that represents a certain value in time. ‘max’, ‘min’ or ‘last’ can also be specified.
    parameters:
      - name: Series
        description: Series to summarize
        type: timeSeries
        mandatory: true
      - name: Interval
        description: "Bucket time-interval size. Examples: 1hour, 1week, 13week, ..."
        type: string
        mandatory: true
      - name: Function
        description: "Aggregation function to use: sum, avg, max, min or last. (default: sum)"
        type: string
        mandatory: false
      - name: AlignToFrom
        description: "Force align start of buckets to from time offset. (default: False). By default, buckets are calculated by rounding to the nearest interval. This works well for intervals smaller than a day. For example, 22:32 will end up in the bucket 22:00-23:00 when the interval=1hour."
        type: string
        mandatory: false
    tags: [transform]

  sumSeries:
    name: Sum Series
    description: Adds metrics together and returns the sum at each datapoint.
    parameters:
      - name: Series
        description: List of Series (at least 2)
        type: timeSeries
        mandatory: true
        multiple: true
    tags: [combine, arithmetic]

  sumSeriesArrays:
    name: Sum Series (Arrays)
    description: Takes two groups of metrics and each metric in the first group by the metric at the same index of the second group. Both groups must have exactly the same number of elements.
    parameters:
      - name: Group A
        description: Group of Series
        type: timeSeries
        mandatory: true
      - name: Group B
        description: Group of Series
        type: timeSeries
        mandatory: true
    tags: [combine, arithmetic]

  timeInterval:
    name: Time Interval
    description: Overrides the global from and until settings to provide data from the given time interval.
    parameters:
      - name: Series
        description: Series to set the time interval for
        type: timeSeries
        mandatory: true
      - name: from
        description: Start time for result data. Accepts the same formats as the `from` GET parameter. Defaults to the global `from` time.
        type: time
        mandatory: false
      - name: until
        description: End time for result data. Accepts the same formats as the `until` GET parameter. Defaults to the global `until` time.
        type: time
        mandatory: false
    tags: [time, transform]

  timeShift:
    name: Time Shift
    description: Takes a series or set of series, followed by a quoted string with the length of time. Returns the selected metrics shifted in time. Useful for comparing a metric against itself at a past periods or correcting data stored at an offset.
    parameters:
      - name: Series
        description: Series to time shift
        type: timeSeries
        mandatory: true
      - name: TimeShift
        description: "Length of time (examples: 7d, +1h). If no sign is given, a minus sign ( - ) is implied which will shift the metric back in time. If a plus sign ( + ) is given, the metric will be shifted forward in time."
        type: string
        mandatory: true
      - name: ResetEnd
        description: "Boolean (True/False) on whether to automatically reset the end date range to the end of the base stat. (default: True). Example case is when you timeshift to last week and have the graph date range set to include a time in the future, will limit this timeshift to pretend ending at the current time. If ResetEnd is False, will instead return full range including future time."
        type: string
        mandatory: false
    tags: [time, transform]

  transformNull:
    name: transform Null
    description: Takes a series or set of series, and an optional value to transform Nulls to.
    parameters:
      - name: Series
        description: Series to transform
        type: timeSeries
        mandatory: true
      - name: NewValue
        description: "Value to transform null points to. (default: 0)"
        type: number
        mandatory: false
    tags: [transform]
